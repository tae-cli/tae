# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/yard-junk/all/yard-junk.rbi
#
# yard-junk-0.0.7

module YardJunk
end
class YardJunk::Logger
  def clear; end
  def format=(fmt); end
  def ignore=(list); end
  def messages; end
  def notify(msg); end
  def output?(message); end
  def register(msg, severity = nil); end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
module YardJunk::Logger::Spellcheck
  def spell_check(error, dictionary); end
end
class YardJunk::Logger::Message
  def ==(other); end
  def error?; end
  def extra; end
  def file; end
  def initialize(message:, severity: nil, code_object: nil, file: nil, line: nil, **extra); end
  def line; end
  def message; end
  def self.find_object(file, line); end
  def self.guard_line(data); end
  def self.pattern(regexp); end
  def self.registry; end
  def self.search_up(pattern); end
  def self.try_parse(line, **context); end
  def self.type; end
  def self.valid_type?(type); end
  def severity; end
  def to_h; end
  def to_s(format = nil); end
  def type; end
  def warn?; end
  include YardJunk::Logger::Spellcheck
end
class YardJunk::Logger::UnknownTag < YardJunk::Logger::Message
  def corrections; end
  def message; end
end
class YardJunk::Logger::InvalidTagFormat < YardJunk::Logger::Message
end
class YardJunk::Logger::UnknownDirective < YardJunk::Logger::Message
end
class YardJunk::Logger::InvalidDirectiveFormat < YardJunk::Logger::Message
end
class YardJunk::Logger::UnknownParam < YardJunk::Logger::Message
  def corrections; end
  def known_params; end
  def message; end
end
class YardJunk::Logger::MissingParamName < YardJunk::Logger::Message
  def message; end
end
class YardJunk::Logger::DuplicateParam < YardJunk::Logger::Message
end
class YardJunk::Logger::RedundantBraces < YardJunk::Logger::Message
  def message; end
end
class YardJunk::Logger::SyntaxError < YardJunk::Logger::Message
  def severity; end
end
class YardJunk::Logger::CircularReference < YardJunk::Logger::Message
end
class YardJunk::Logger::Undocumentable < YardJunk::Logger::Message
  def message; end
  def quote; end
end
class YardJunk::Logger::UnknownNamespace < YardJunk::Logger::Message
  def message; end
  def namespace; end
end
class YardJunk::Logger::MacroAttachError < YardJunk::Logger::Message
end
class YardJunk::Logger::MacroNameError < YardJunk::Logger::Message
end
class YardJunk::Logger::InvalidLink < YardJunk::Logger::Message
end
class YardJunk::Logger::InvalidFileLink < YardJunk::Logger::Message
end
module YardJunk::Logger::Mixin
  def backtrace(exception, level_meth = nil); end
  def debug(msg); end
  def error(msg); end
  def warn(msg); end
end
module YardJunk::CommandLineOptions
  def common_options(opts); end
end
class YardJunk::Janitor
  def errors; end
  def exit_code; end
  def expand_pathes(pathes); end
  def files; end
  def guess_reporters(*symbols, **symbols_with_args); end
  def initialize(mode: nil, pathes: nil); end
  def messages; end
  def mode; end
  def prepare_options(opts); end
  def problems; end
  def report(*args, **opts); end
  def run(*opts); end
  def stats; end
  def yardopts; end
  def yardopts_with_files(files); end
end
class YardJunk::Janitor::BaseReporter
  def _stats; end
  def finalize; end
  def header(_title, _explanation); end
  def humanize_duration(duration); end
  def initialize(io_or_filename = nil); end
  def row(_message); end
  def section(title, explanation, messages); end
  def stats(**stat); end
end
class YardJunk::Janitor::TextReporter < YardJunk::Janitor::BaseReporter
  def _stats(**stat); end
  def colorize(text, color); end
  def colorized_stats(errors:, problems:, duration:); end
  def header(title, explanation); end
  def row(msg); end
  def status_color(errors, problems); end
end
class YardJunk::Janitor::HtmlReporter < YardJunk::Janitor::BaseReporter
  def _stats(**stat); end
  def finalize; end
  def header(title, explanation); end
  def html; end
  def initialize(*arg0); end
  def render(template, values); end
  def row(message); end
end
class YardJunk::Janitor::HtmlReporter::Helper < OpenStruct
  def the_binding; end
end
class YardJunk::Janitor::Resolver
  def file; end
  def init_docstring(docstring); end
  def init_file(file); end
  def initialize(object, yard_options); end
  def line; end
  def markup; end
  def object; end
  def options; end
  def resolve; end
  def resolve_code_object(name, link); end
  def resolve_file(name, link); end
  def self.resolve_all(yard_options); end
  def serializer; end
  def try_resolve(link); end
  include YARD::Templates::Helpers::HtmlHelper
  include YARD::Templates::Helpers::MarkupHelper
end
class YardJunk::Janitor::YardOptions
  def extra_files; end
  def files; end
  def initialize; end
  def options; end
  def remove_option(long, short = nil); end
  def set_files(*files); end
  def to_a; end
end
class YardJunk::Janitor::YardOptions::Internal < YARD::CLI::Yardoc
  def option_args; end
  def optparse(*args); end
  def parse_files(*args); end
end
